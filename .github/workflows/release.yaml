name: Build precompiled NIFs

env:
  NIF_DIRECTORY: "native/ex_pdf_to_text"

on:
  push:
    branches:
      # Always run on main branch.
      - main
    tags:
      # Tags will always run.
      - '*'
  pull_request:
    paths:
      # Run if "native" path changed.
      - 'native/**'

defaults:
  run:
    shell: bash
    # Sets the working dir for "run" scripts.
    # Note that this won't change the directory for actions (tasks with "uses").
    working-directory: "./native/ex_pdf_to_text"

jobs:
  build_release:
    name: NIF ${{ matrix.nif }} - ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        nif:
          - "2.15"
          - "2.16"
        job:
          # - { target: arm-unknown-linux-gnueabihf , os: ubuntu-20.04 , use-cross: true }
          - { target: aarch64-unknown-linux-gnu   , os: ubuntu-20.04 , use-cross: true }
          - { target: aarch64-apple-darwin        , os: macos-11      }
          # - { target: riscv64gc-unknown-linux-gnu , os: ubuntu-20.04 , use-cross: true }
          - { target: x86_64-apple-darwin         , os: macos-11      }
          - { target: x86_64-unknown-linux-gnu    , os: ubuntu-20.04  }
          # - { target: x86_64-pc-windows-gnu       , os: windows-2019  }
          # - { target: x86_64-pc-windows-msvc      , os: windows-2019  }

    env:
      RUSTLER_NIF_VERSION: ${{ matrix.nif }}
    steps:
    - name: Checkout source code
      uses: actions/checkout@v2

    - name: Install prerequisites
      run: |
        case ${{ matrix.job.target }} in
          arm-unknown-linux-*) sudo apt-get -y update ; sudo apt-get -y install gcc-arm-linux-gnueabihf; sudo dpkg --add-architecture armhf; sudo apt-get update || true; sudo apt-get -y install libpoppler-glib-dev:armhf libpoppler-dev:armhf libcairo2-dev:armhf libglib2.0-dev:armhf; export PKG_CONFIG_LIBDIR=/usr/lib/arm-linux-gnueabihf/pkgconfig;;
          aarch64-unknown-linux-gnu) sudo apt-get -y update ; sudo apt-get -y install gcc-aarch64-linux-gnu; sudo dpkg --add-architecture arm64; sudo apt-get update || true; sudo apt-get -y install libpoppler-glib-dev:arm64 libpoppler-dev:arm64 libcairo2-dev:arm64 libglib2.0-dev:arm64;;
          aarch64-apple-darwin) NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"; brew install gnu-tar poppler; sudo ln -s $(brew --prefix)/opt/gnu-tar/libexec/gnubin/tar /usr/local/bin/tar;;
          x86_64-apple-darwin) NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"; brew install poppler;;
          *) sudo apt-get -y update ; sudo apt-get -y install libpoppler-glib-dev libpoppler-dev libcairo2-dev libglib2.0-dev
        esac

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        target: ${{ matrix.job.target }}

    - name: Show version information (Rust, cargo, GCC)
      run: |
        gcc --version || true
        rustup -V
        rustup toolchain list
        rustup default
        cargo -V
        rustc -V
        rustc --print=cfg

    - name: Build the project
      id: build-crate
      uses: philss/rustler-precompiled-action@v1.0.1
      with:
        project-name: ex_pdf_to_text
        project-version: ${{ env.PROJECT_VERSION }}
        target: ${{ matrix.job.target }}
        nif-version: ${{ matrix.nif }}
        use-cross: ${{ matrix.job.use-cross }}
        project-dir: "native/ex_pdf_to_text"

    - name: "Artifact upload"
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.build-crate.outputs.file-name }}
        path: ${{ steps.build-crate.outputs.file-path }}

    - name: Publish archives and packages
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{ steps.build-crate.outputs.file-path }}
      if: startsWith(github.ref, 'refs/tags/')
